// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "school_schedule_2/internal/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// TeacherRepo is an autogenerated mock type for the teacherRepo type
type TeacherRepo struct {
	mock.Mock
}

type TeacherRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TeacherRepo) EXPECT() *TeacherRepo_Expecter {
	return &TeacherRepo_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: id
func (_m *TeacherRepo) GetByID(id int64) (*model.Teacher, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Teacher
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*model.Teacher, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *model.Teacher); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Teacher)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeacherRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type TeacherRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int64
func (_e *TeacherRepo_Expecter) GetByID(id interface{}) *TeacherRepo_GetByID_Call {
	return &TeacherRepo_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *TeacherRepo_GetByID_Call) Run(run func(id int64)) *TeacherRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *TeacherRepo_GetByID_Call) Return(_a0 *model.Teacher, _a1 error) *TeacherRepo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeacherRepo_GetByID_Call) RunAndReturn(run func(int64) (*model.Teacher, error)) *TeacherRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewTeacherRepo creates a new instance of TeacherRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeacherRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeacherRepo {
	mock := &TeacherRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
