// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	dto "school_schedule_2/internal/domain/dto"
	enums "school_schedule_2/internal/domain/model/enums"

	mock "github.com/stretchr/testify/mock"

	model "school_schedule_2/internal/domain/model"
)

// LessonRepo is an autogenerated mock type for the lessonRepo type
type LessonRepo struct {
	mock.Mock
}

type LessonRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *LessonRepo) EXPECT() *LessonRepo_Expecter {
	return &LessonRepo_Expecter{mock: &_m.Mock}
}

// CreateLesson provides a mock function with given fields: lesson
func (_m *LessonRepo) CreateLesson(lesson *model.Lesson) (*model.Lesson, error) {
	ret := _m.Called(lesson)

	if len(ret) == 0 {
		panic("no return value specified for CreateLesson")
	}

	var r0 *model.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Lesson) (*model.Lesson, error)); ok {
		return rf(lesson)
	}
	if rf, ok := ret.Get(0).(func(*model.Lesson) *model.Lesson); ok {
		r0 = rf(lesson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Lesson) error); ok {
		r1 = rf(lesson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LessonRepo_CreateLesson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLesson'
type LessonRepo_CreateLesson_Call struct {
	*mock.Call
}

// CreateLesson is a helper method to define mock.On call
//   - lesson *model.Lesson
func (_e *LessonRepo_Expecter) CreateLesson(lesson interface{}) *LessonRepo_CreateLesson_Call {
	return &LessonRepo_CreateLesson_Call{Call: _e.mock.On("CreateLesson", lesson)}
}

func (_c *LessonRepo_CreateLesson_Call) Run(run func(lesson *model.Lesson)) *LessonRepo_CreateLesson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Lesson))
	})
	return _c
}

func (_c *LessonRepo_CreateLesson_Call) Return(_a0 *model.Lesson, _a1 error) *LessonRepo_CreateLesson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LessonRepo_CreateLesson_Call) RunAndReturn(run func(*model.Lesson) (*model.Lesson, error)) *LessonRepo_CreateLesson_Call {
	_c.Call.Return(run)
	return _c
}

// FindLesson provides a mock function with given fields: req
func (_m *LessonRepo) FindLesson(req dto.FindAllLessonFilter) ([]*model.Lesson, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for FindLesson")
	}

	var r0 []*model.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.FindAllLessonFilter) ([]*model.Lesson, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(dto.FindAllLessonFilter) []*model.Lesson); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.FindAllLessonFilter) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LessonRepo_FindLesson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLesson'
type LessonRepo_FindLesson_Call struct {
	*mock.Call
}

// FindLesson is a helper method to define mock.On call
//   - req dto.FindAllLessonFilter
func (_e *LessonRepo_Expecter) FindLesson(req interface{}) *LessonRepo_FindLesson_Call {
	return &LessonRepo_FindLesson_Call{Call: _e.mock.On("FindLesson", req)}
}

func (_c *LessonRepo_FindLesson_Call) Run(run func(req dto.FindAllLessonFilter)) *LessonRepo_FindLesson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.FindAllLessonFilter))
	})
	return _c
}

func (_c *LessonRepo_FindLesson_Call) Return(_a0 []*model.Lesson, _a1 error) *LessonRepo_FindLesson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LessonRepo_FindLesson_Call) RunAndReturn(run func(dto.FindAllLessonFilter) ([]*model.Lesson, error)) *LessonRepo_FindLesson_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *LessonRepo) GetByID(id int64) (*model.Lesson, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Lesson
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*model.Lesson, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *model.Lesson); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Lesson)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LessonRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type LessonRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int64
func (_e *LessonRepo_Expecter) GetByID(id interface{}) *LessonRepo_GetByID_Call {
	return &LessonRepo_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *LessonRepo_GetByID_Call) Run(run func(id int64)) *LessonRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *LessonRepo_GetByID_Call) Return(_a0 *model.Lesson, _a1 error) *LessonRepo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LessonRepo_GetByID_Call) RunAndReturn(run func(int64) (*model.Lesson, error)) *LessonRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// LessonExists provides a mock function with given fields: name, slot
func (_m *LessonRepo) LessonExists(name enums.OfficeName, slot enums.TimeSlotName) bool {
	ret := _m.Called(name, slot)

	if len(ret) == 0 {
		panic("no return value specified for LessonExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(enums.OfficeName, enums.TimeSlotName) bool); ok {
		r0 = rf(name, slot)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LessonRepo_LessonExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LessonExists'
type LessonRepo_LessonExists_Call struct {
	*mock.Call
}

// LessonExists is a helper method to define mock.On call
//   - name enums.OfficeName
//   - slot enums.TimeSlotName
func (_e *LessonRepo_Expecter) LessonExists(name interface{}, slot interface{}) *LessonRepo_LessonExists_Call {
	return &LessonRepo_LessonExists_Call{Call: _e.mock.On("LessonExists", name, slot)}
}

func (_c *LessonRepo_LessonExists_Call) Run(run func(name enums.OfficeName, slot enums.TimeSlotName)) *LessonRepo_LessonExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(enums.OfficeName), args[1].(enums.TimeSlotName))
	})
	return _c
}

func (_c *LessonRepo_LessonExists_Call) Return(_a0 bool) *LessonRepo_LessonExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LessonRepo_LessonExists_Call) RunAndReturn(run func(enums.OfficeName, enums.TimeSlotName) bool) *LessonRepo_LessonExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewLessonRepo creates a new instance of LessonRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLessonRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *LessonRepo {
	mock := &LessonRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
