// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Timer is an autogenerated mock type for the timer type
type Timer struct {
	mock.Mock
}

type Timer_Expecter struct {
	mock *mock.Mock
}

func (_m *Timer) EXPECT() *Timer_Expecter {
	return &Timer_Expecter{mock: &_m.Mock}
}

// NowMoscow provides a mock function with no fields
func (_m *Timer) NowMoscow() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NowMoscow")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Timer_NowMoscow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NowMoscow'
type Timer_NowMoscow_Call struct {
	*mock.Call
}

// NowMoscow is a helper method to define mock.On call
func (_e *Timer_Expecter) NowMoscow() *Timer_NowMoscow_Call {
	return &Timer_NowMoscow_Call{Call: _e.mock.On("NowMoscow")}
}

func (_c *Timer_NowMoscow_Call) Run(run func()) *Timer_NowMoscow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Timer_NowMoscow_Call) Return(_a0 time.Time) *Timer_NowMoscow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Timer_NowMoscow_Call) RunAndReturn(run func() time.Time) *Timer_NowMoscow_Call {
	_c.Call.Return(run)
	return _c
}

// NewTimer creates a new instance of Timer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTimer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Timer {
	mock := &Timer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
